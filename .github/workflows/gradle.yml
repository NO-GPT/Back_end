name: CI/CD Pipeline with Docker and Deployment

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Dependabot 및 배포용 권한

    steps:
      # Step 1: Checkout 코드
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: JDK 21 설정
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # Step 3: Gradle 캐시 설정
      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Step 4: Gradle 빌드
      - name: Build with Gradle Wrapper
        run: ./gradlew clean assemble --no-daemon

      # Step 5: AWS CLI 설정 및 S3 업로드
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Upload JAR to S3
        run: |
          aws s3 cp build/libs/*.jar s3://gbsw-2025project/2025-321-portfolio-files/app.jar

      # Step 6: 도커허브 로그인
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 7: 도커 이미지 빌드 및 푸시
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/2025-321-portfolio-app:latest

      # Step 8: EC2에 배포
      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        run: |
          echo "$EC2_SSH_KEY" > key.pem
          chmod 400 key.pem
          scp -i key.pem -o StrictHostKeyChecking=no /home/ec2-user/new_portfolio/deploy.sh ec2-user@$EC2_HOST:/home/ec2-user/new_portfolio/deploy.sh
          ssh -i key.pem -o StrictHostKeyChecking=no ec2-user@$EC2_HOST 'bash /home/ec2-user/new_portfolio/deploy.sh'

  # 의존성 제출 (Dependabot Alerts 지원)
  dependency-submission:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # 의존성 그래프 생성 및 제출
      - name: Generate and submit dependency graph
        uses: gradle/actions/dependency-submission@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
